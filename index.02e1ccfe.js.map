{"mappings":"YAAO,IAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,cAC7BC,KAAMF,SAASC,cAAc,eCiBpBE,EAAS,W,IAACC,EAAIC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,G,OAC1BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,G,GAGP,G,EC9BE,SAASG,EAAWC,GACzB,IAAMC,EAAO,CAAEN,GAAIR,KAInB,OAHA,IAAIe,SAASF,EAAIG,eAAeC,SAAQ,SAACC,EAAOC,GAC9CL,EAAKK,GAAOD,C,IAEPJ,C,CCPF,SAASM,EAAiBN,GAC/B,MAAO,mFAEIO,OADwCP,EAAKN,GAAG,mCAEjDa,OADCP,EAAKQ,SAAS,qBACDD,OAAdP,EAAKS,SAAS,iB,CCJ1B,IAAMC,EAAgB,QAMtB,SAASC,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAAQL,KAAmB,E,CAGrD,ICJEM,EDIIC,EAAkB,CAAEC,SATjC,SAAkBlB,GAChB,IAAMmB,EAAaR,IACnBQ,EAAWC,KAAKpB,GAChBc,aAAaO,QAAQX,EAAeE,KAAKU,UAAUH,G,EAMVI,OAAAZ,GEa3C9B,EAAKC,KAAK0C,iBAAiB,UAE3B,SAAsBzB,GACpBA,EAAI0B,iBACJ,IAAMzB,EAAOF,EAAWC,GAClBiB,EAASV,EAAiBN,GAChCnB,EAAKI,KAAKyC,mBAAmB,YAAaV,GAC1CC,EAAgBC,SAASlB,GACzBnB,EAAKC,KAAK6C,O,IDzBHX,EADSC,EAAgBM,SACVK,IAAItB,GAAkBuB,KAAK,IAChDhD,EAAKI,KAAKyC,mBAAmB,YAAaV,GC6B7CnC,EAAKI,KAAKuC,iBAAiB,SAC3B,SAAoBM,GAClB,GAA8B,WAA1BA,EAAMC,OAAOC,SAAuB,CACtC,IAAMtC,EAAKoC,EAAMC,OAAOE,QAAQvC,GAChCwC,QAAQC,IAAIzC,E","sources":["src/js/refs.js","node_modules/nanoid/index.browser.js","src/js/createTask.js","src/js/createTaskMarkup.js","src/js/localStorageAPI.js","src/js/renderTasks.js","src/index.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('#task-form'),\n  list: document.querySelector('#task-list'),\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nexport function createTask(evt) {\n  const task = { id: nanoid() };\n  new FormData(evt.currentTarget).forEach((value, key) => {\n    task[key] = value;\n  });\n  return task;\n}\n","export function createTaskMarkup(task) {\n  return `<li class=\"task-list-item\">\n       <button class=\"task-list-item-btn\" data-id=\"${task.id}\">Удалить</button>\n       <h3>${task.taskName}</h3>\n       <p>${task.taskText}</p>\n   </li>`;\n}\n","const LOCAL_STORAGE = 'tasks';\nfunction saveTask(task) {\n  const arrayOfObj = getAll();\n  arrayOfObj.push(task);\n  localStorage.setItem(LOCAL_STORAGE, JSON.stringify(arrayOfObj));\n}\nfunction getAll() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE)) || [];\n}\n\nexport const localStorageAPI = { saveTask, getAll };\n","import { localStorageAPI } from \"./localStorageAPI\";\nimport { refs } from \"./refs\";\nimport { createTaskMarkup } from \"./createTaskMarkup\";\n\nexport function renderTasks() {\n    const tasks = localStorageAPI.getAll();\n   const markup = tasks.map(createTaskMarkup).join(\"\");\n   refs.list.insertAdjacentHTML('beforeend', markup);\n   }","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\n\nimport { refs } from './js/refs';\nimport { createTask } from './js/createTask';\nimport { createTaskMarkup } from './js/createTaskMarkup';\nimport { localStorageAPI } from './js/localStorageAPI';\nimport { renderTasks } from './js/renderTasks';\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const task = createTask(evt);\n  const markup = createTaskMarkup(task);\n  refs.list.insertAdjacentHTML('beforeend', markup);\n  localStorageAPI.saveTask(task);\n  refs.form.reset();\n}\n\nrenderTasks();\n\nrefs.list.addEventListener('click', deleteTask);\nfunction deleteTask(event) {\n  if (event.target.nodeName === 'BUTTON') {\n    const id = event.target.dataset.id;\n    console.log(id);\n  }\n}\n"],"names":["$37e33676934ad046$export$21666b427502ea6d","form","document","querySelector","list","$8069ef7e6126e429$export$ac4959f4f1338dfc","size","arguments","length","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$0c2b62bf04dc0cab$export$f7292ab7796be73c","evt","task","FormData","currentTarget","forEach","value","key","$68fc5e41c1c2a135$export$5abcd3dce68fbf9a","concat","taskName","taskText","$48d731dcdd8bc0d3$var$LOCAL_STORAGE","$48d731dcdd8bc0d3$var$getAll","JSON","parse","localStorage","getItem","markup","$48d731dcdd8bc0d3$export$4a683aab0e79cfdc","saveTask","arrayOfObj","push","setItem","stringify","getAll","addEventListener","preventDefault","insertAdjacentHTML","reset","map","join","event","target","nodeName","dataset","console","log"],"version":3,"file":"index.02e1ccfe.js.map"}