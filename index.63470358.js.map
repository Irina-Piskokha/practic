{"mappings":"AAAO,MAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,cAC7BC,KAAMF,SAASC,cAAc,eCDxB,IAkBIE,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC9BE,SAASG,EAAWC,GACzB,MAAMC,EAAO,CAAEN,GAAIN,KAInB,OAHA,IAAIa,SAASF,EAAIG,eAAeC,SAAQ,CAACC,EAAOC,KAC9CL,EAAKK,GAAOD,CAAK,IAEZJ,C,CCPF,SAASM,EAAiBN,GAC/B,MAAO,mFAC4CA,EAAKN,oCAC7CM,EAAKO,4BACNP,EAAKQ,wB,CCEjB,SAASC,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAPX,WAOsC,E,CAGrD,MAAMC,EAAkB,C,SAT/B,SAAkBd,GAChB,MAAMe,EAAaN,IACnBM,EAAWC,KAAKhB,GAChBY,aAAaK,QAJO,QAIgBP,KAAKQ,UAAUH,G,SAMVN,GCa3C1B,EAAKC,KAAKmC,iBAAiB,UAE3B,SAAsBpB,GACpBA,EAAIqB,iBACJ,MAAMpB,EAAOF,EAAWC,GAClBsB,EAASf,EAAiBN,GAChCjB,EAAKI,KAAKmC,mBAAmB,YAAaD,GAC1CP,EAAgBS,SAASvB,GACzBjB,EAAKC,KAAKwC,O,IC3BL,WACH,MACKH,EADSP,EAAgBW,SACVC,IAAIpB,GAAkBqB,KAAK,IAChD5C,EAAKI,KAAKmC,mBAAmB,YAAaD,E,CD2B7C,GAEAtC,EAAKI,KAAKgC,iBAAiB,SAC3B,SAAoBS,GAClB,GAA8B,WAA1BA,EAAMC,OAAOC,SAAuB,CACtC,MAAMpC,EAAKkC,EAAMC,OAAOE,QAAQrC,GAChCsC,QAAQC,IAAIvC,E","sources":["src/js/refs.js","node_modules/nanoid/index.browser.js","src/js/createTask.js","src/js/createTaskMarkup.js","src/js/localStorageAPI.js","src/index.js","src/js/renderTasks.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('#task-form'),\n  list: document.querySelector('#task-list'),\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nexport function createTask(evt) {\n  const task = { id: nanoid() };\n  new FormData(evt.currentTarget).forEach((value, key) => {\n    task[key] = value;\n  });\n  return task;\n}\n","export function createTaskMarkup(task) {\n  return `<li class=\"task-list-item\">\n       <button class=\"task-list-item-btn\" data-id=\"${task.id}\">Удалить</button>\n       <h3>${task.taskName}</h3>\n       <p>${task.taskText}</p>\n   </li>`;\n}\n","const LOCAL_STORAGE = 'tasks';\nfunction saveTask(task) {\n  const arrayOfObj = getAll();\n  arrayOfObj.push(task);\n  localStorage.setItem(LOCAL_STORAGE, JSON.stringify(arrayOfObj));\n}\nfunction getAll() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE)) || [];\n}\n\nexport const localStorageAPI = { saveTask, getAll };\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\n\nimport { refs } from './js/refs';\nimport { createTask } from './js/createTask';\nimport { createTaskMarkup } from './js/createTaskMarkup';\nimport { localStorageAPI } from './js/localStorageAPI';\nimport { renderTasks } from './js/renderTasks';\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const task = createTask(evt);\n  const markup = createTaskMarkup(task);\n  refs.list.insertAdjacentHTML('beforeend', markup);\n  localStorageAPI.saveTask(task);\n  refs.form.reset();\n}\n\nrenderTasks();\n\nrefs.list.addEventListener('click', deleteTask);\nfunction deleteTask(event) {\n  if (event.target.nodeName === 'BUTTON') {\n    const id = event.target.dataset.id;\n    console.log(id);\n  }\n}\n","import { localStorageAPI } from \"./localStorageAPI\";\nimport { refs } from \"./refs\";\nimport { createTaskMarkup } from \"./createTaskMarkup\";\n\nexport function renderTasks() {\n    const tasks = localStorageAPI.getAll();\n   const markup = tasks.map(createTaskMarkup).join(\"\");\n   refs.list.insertAdjacentHTML('beforeend', markup);\n   }"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","list","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$0b289c241a71d611$export$f7292ab7796be73c","evt","task","FormData","currentTarget","forEach","value","key","$454981b0f76e497b$export$5abcd3dce68fbf9a","taskName","taskText","$f1e93b4660a948dd$var$getAll","JSON","parse","localStorage","getItem","$f1e93b4660a948dd$export$4a683aab0e79cfdc","arrayOfObj","push","setItem","stringify","addEventListener","preventDefault","markup","insertAdjacentHTML","saveTask","reset","getAll","map","join","event","target","nodeName","dataset","console","log"],"version":3,"file":"index.63470358.js.map"}